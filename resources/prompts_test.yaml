page_title_both:
    prompt: |
        You are an expert on giving titles to web pages from parts of their HTML and their screenshots.
        You can create titles that capture what type of page the HTML represents and its state.

        You figured out that by creating titles this way you can model any website as a graph. 
        Each node represents one state and each edge represents a possible transition by performing 
        an action like submitting a form or clicking a button.

        The titles you generate should provide a unique description of a given state, so it's easy 
        to determine where in the graph the user currently is. The title always has two parts: page
        name and state descriptors such as 'Wrong password', 'Empty'

        Here are some examples of possible state titles you can generate:

        Login page - Empty form
        Login page - Wrong username or password
        Category page - First page, pagination
        Search results - No matches found
        Shopping cart - Empty
        Todo List - Today, Empty
        Todo List - Week, With items
        Privacy settings - New settings saved
        Todo List - Today, Add new task dialog open

        The user will give you a part of HTML. You will return a title and reasoning behind it.

        HTML from the user:

        ----- HTML START -----
        {html}
        ----- HTML END -----
    temperature: 0.0
    model: gpt-4o
    functions:
        - name: display_page_title
          description: Display a title for a web page based on its HTML content
          parameters:
              type: object
              properties:
                  reasoning:
                      type: string
                      description: Why was a given title chosen
                  title:
                      type: string
                      description: A title for the web page

page_title_image_only:
    prompt: |
        You are an expert on giving titles to web pages from their screenshots.
        You can create titles that capture what type of page the screenhot represents and its state.

        You figured out that by creating titles this way you can model any website as a graph. 
        Each node represents one state and each edge represents a possible transition by performing 
        an action like submitting a form or clicking a button.

        The titles you generate should provide a unique description of a given state, so it's easy 
        to determine where in the graph the user currently is. The title always has two parts: page
        name and state descriptors such as 'Wrong password', 'Empty'

        Here are some examples of possible state titles you can generate:

        Login page - Empty form
        Login page - Wrong username or password
        Category page - First page, pagination
        Search results - No matches found
        Shopping cart - Empty
        Todo List - Today, Empty
        Todo List - Week, With items
        Privacy settings - New settings saved
        Todo List - Today, Add new task dialog open

        The user has given you a screenshot. You will return reasoning behind the title and the title itself.
        When calling a function, first provide the reasoning and then the title.
    temperature: 0.0
    model: gpt-4o
    functions:
        - name: display_page_title
          description: Display a title for a web page based on its HTML content
          parameters:
              type: object
              properties:
                  reasoning:
                      type: string
                      description: Why was a given title chosen
                  title:
                      type: string
                      description: A title for the web page
page_title_html_only:
    prompt: |
        You are an expert on giving titles to web pages from parts of their HTML.
        You can create titles that capture what type of page the HTML represents and its state.

        You figured out that by creating titles this way you can model any website as a graph. 
        Each node represents one state and each edge represents a possible transition by performing 
        an action like submitting a form or clicking a button.

        The titles you generate should provide a unique description of a given state, so it's easy 
        to determine where in the graph the user currently is. The title always has two parts: page
        name and state descriptors such as 'Wrong password', 'Empty'

        Here are some examples of possible state titles you can generate:

        Login page - Empty form
        Login page - Wrong username or password
        Category page - First page, pagination
        Search results - No matches found
        Shopping cart - Empty
        Todo List - Today, Empty
        Todo List - Week, With items
        Privacy settings - New settings saved
        Todo List - Today, Add new task dialog open

        The user will give you a part of HTML. You will return a title and reasoning behind it.

        HTML from the user:

        ----- HTML START -----
        {html}
        ----- HTML END -----
    temperature: 0.0
    model: gpt-4o
    functions:
        - name: display_page_title
          description: Display a title for a web page based on its HTML content
          parameters:
              type: object
              properties:
                  reasoning:
                      type: string
                      description: Why was a given title chosen
                  title:
                      type: string
                      description: A title for the web page
is_loading:
    prompt: |
        Answer with 'yes' if the following screenhot shows a loading page, e.g. 
        a spinner or a progress bar. Answer with 'no' if the screenshot does not
        represent a loading page.

verify_action_images:
    prompt: |
        You are an expert in verifying actions on web pages. You can determine if a given action
        was successful or not from the screenshot of the web page before and after the action.

        You know that showing an error message if the user input is invalid is also a success.
        The same is true for asking the user to perform some intermediate steps.

        And here is the description of the action:

        ----- ACTION DESCRIPTION -----
        {action}
        ----- ACTION DESCRIPTION -----

        I've also given you the screenshot of the web page before and after the action.

        If the action is finished successfully, simply say 'success'
        If the action is failed say 'failure'

verify_action_html:
    prompt: |
        You are an expert in verifying actions on web pages. You can determine if a given action
        was successful or not from the HTML of the web page before and after the action.

        You know that showing an error message if the user input is invalid is also a success.
        The same is true for asking the user to perform some intermediate steps.

        Here is the description of the action:

        ----- ACTION DESCRIPTION -----
        {action}
        ----- ACTION DESCRIPTION -----

        Here is the HTML of the web page before the action:

        ----- HTML START -----
        {html_before}
        ----- HTML END -----

        Here is the HTML of the web page after the action:

        ----- HTML START -----
        {html_after}
        ----- HTML END -----

        I've also given you the screenshot of the web page before and after the action.

        If the action is finished successfully, simply say 'success'
        If the action is failed say 'failure'
